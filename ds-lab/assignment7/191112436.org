#+title: DS Lab Assignment 7
#+subtitle: Seshal Jain, Scholar Number 191112436, CSE 3
#+options: h:2 num:nil toc:nil author:nil
#+date: October 14, 2020
#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}\setlength{\parindent}{0pt}

* Program 1
Program to implement basic operations on a Queue
#+BEGIN_SRC cpp :tangle a7p1.cpp
#include <bits/stdc++.h>
using namespace std;

class Node {
  public:
    int data;
    Node* next;
    Node();
    Node(int);
};

Node::Node() {
  data = 0;
  next = nullptr;
}

Node::Node(int d) {
  data = d;
  next = nullptr;
}

class Queue {
  Node* head;
  Node* tail;
  public:
    Queue();
    bool isEmpty();
    void enqueue(int);
    int dequeue();
    void display();
};

Queue::Queue() {
  head = nullptr;
  tail = nullptr;
}

bool Queue::isEmpty() {
  return (head == nullptr && tail == nullptr);
}

void Queue::enqueue(int d) {
  if (isEmpty()) {
    Node* ptr = new Node(d);
    head = ptr;
    tail = ptr;
  } else {
    Node* ptr = new Node(d);
    tail->next = ptr;
    tail = tail->next;
  }
}

int Queue::dequeue() {
  if (isEmpty()) {
    return -1;
  } else if (head == tail) {
    Node* ptr = head;
    int temp = ptr->data;
    head = head->next;
    tail = head;
    delete ptr;
    return temp;
  } else {
    Node* ptr = head;
    int temp = ptr->data;
    head = head->next;
    delete ptr;
    return temp;
  }
}

void Queue::display() {
  if (isEmpty()) {
    cout << "Queue is empty." << "\n";
  } else if (head == tail) {
    cout << head->data << "-->" << "\n";
  } else {
    Node* ptr = head;
    while (ptr != tail->next) {
      cout << ptr->data << "-->";
      ptr = ptr->next;
    }
    cout << "\n";
  }
}

int main()
{
  int choice = -1;
  cout << "Queue as a linked list" << "\n\n";
  Queue q;
  do {
    cout << "1. Enqueue" << "\n";
    cout << "2. Dequeue"<< "\n";
    cout << "3. Display queue" << "\n";
    cout << "Enter choice: ";
    cin >> choice;
    switch (choice) {
      case 1:
      {
        int d = 0;
        cout << "Enter value: ";
        cin >> d;
        q.enqueue(d);
      }
      break;
      case 2:
      {
        int d = q.dequeue();
        cout << "Node " << d << " deleted." << "\n";
      }
      break;
      case 3:
        q.display();
        break;
      default:
        choice = -1;
        cout << "Wrong choice!" << "\n";
    }
  } while (choice != -1);
  return 0;
}
#+END_SRC

** Output
#+BEGIN_EXAMPLE
$ ./a7p1
Queue as a linked list

1. Enqueue
2. Dequeue
3. Display queue
Enter choice: 1
Enter value: 5
1. Enqueue
2. Dequeue
3. Display queue
Enter choice: 1
Enter value: 2
1. Enqueue
2. Dequeue
3. Display queue
Enter choice: 2
Node 5 deleted.
1. Enqueue
2. Dequeue
3. Display queue
Enter choice: 3
2-->
1. Enqueue
2. Dequeue
3. Display queue
Enter choice: 2
Node 2 deleted.
1. Enqueue
2. Dequeue
3. Display queue
Enter choice: 3
Queue is empty.
1. Enqueue
2. Dequeue
3. Display queue
Enter choice: 4
Wrong choice!
#+END_EXAMPLE

